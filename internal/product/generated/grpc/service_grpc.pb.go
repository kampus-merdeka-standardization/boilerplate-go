// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: internal/product/grpc/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductServiveClient is the client API for ProductServive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiveClient interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	GetAllProduct(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllProductResponse, error)
	GetProductByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ProductResponse, error)
	UpdateProductByID(ctx context.Context, in *UpdateProductByIDRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	DeleteProductByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ID, error)
}

type productServiveClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiveClient(cc grpc.ClientConnInterface) ProductServiveClient {
	return &productServiveClient{cc}
}

func (c *productServiveClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/ProductServive/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiveClient) GetAllProduct(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllProductResponse, error) {
	out := new(GetAllProductResponse)
	err := c.cc.Invoke(ctx, "/ProductServive/GetAllProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiveClient) GetProductByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/ProductServive/GetProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiveClient) UpdateProductByID(ctx context.Context, in *UpdateProductByIDRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/ProductServive/UpdateProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiveClient) DeleteProductByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/ProductServive/DeleteProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiveServer is the server API for ProductServive service.
// All implementations must embed UnimplementedProductServiveServer
// for forward compatibility
type ProductServiveServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*ProductResponse, error)
	GetAllProduct(context.Context, *Empty) (*GetAllProductResponse, error)
	GetProductByID(context.Context, *ID) (*ProductResponse, error)
	UpdateProductByID(context.Context, *UpdateProductByIDRequest) (*ProductResponse, error)
	DeleteProductByID(context.Context, *ID) (*ID, error)
	mustEmbedUnimplementedProductServiveServer()
}

// UnimplementedProductServiveServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiveServer struct {
}

func (UnimplementedProductServiveServer) CreateProduct(context.Context, *CreateProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServiveServer) GetAllProduct(context.Context, *Empty) (*GetAllProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProduct not implemented")
}
func (UnimplementedProductServiveServer) GetProductByID(context.Context, *ID) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByID not implemented")
}
func (UnimplementedProductServiveServer) UpdateProductByID(context.Context, *UpdateProductByIDRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductByID not implemented")
}
func (UnimplementedProductServiveServer) DeleteProductByID(context.Context, *ID) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductByID not implemented")
}
func (UnimplementedProductServiveServer) mustEmbedUnimplementedProductServiveServer() {}

// UnsafeProductServiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiveServer will
// result in compilation errors.
type UnsafeProductServiveServer interface {
	mustEmbedUnimplementedProductServiveServer()
}

func RegisterProductServiveServer(s grpc.ServiceRegistrar, srv ProductServiveServer) {
	s.RegisterService(&ProductServive_ServiceDesc, srv)
}

func _ProductServive_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiveServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProductServive/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiveServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServive_GetAllProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiveServer).GetAllProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProductServive/GetAllProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiveServer).GetAllProduct(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServive_GetProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiveServer).GetProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProductServive/GetProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiveServer).GetProductByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServive_UpdateProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiveServer).UpdateProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProductServive/UpdateProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiveServer).UpdateProductByID(ctx, req.(*UpdateProductByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServive_DeleteProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiveServer).DeleteProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProductServive/DeleteProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiveServer).DeleteProductByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductServive_ServiceDesc is the grpc.ServiceDesc for ProductServive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductServive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductServive",
	HandlerType: (*ProductServiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductServive_CreateProduct_Handler,
		},
		{
			MethodName: "GetAllProduct",
			Handler:    _ProductServive_GetAllProduct_Handler,
		},
		{
			MethodName: "GetProductByID",
			Handler:    _ProductServive_GetProductByID_Handler,
		},
		{
			MethodName: "UpdateProductByID",
			Handler:    _ProductServive_UpdateProductByID_Handler,
		},
		{
			MethodName: "DeleteProductByID",
			Handler:    _ProductServive_DeleteProductByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/product/grpc/service.proto",
}
