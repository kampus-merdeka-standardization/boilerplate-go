// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/product/usecase/type.go
//
// Generated by this command:
//
//	mockgen -typed=true -package=mock_usecase -source=internal/modules/product/usecase/type.go -destination=mock/usecase/product.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	product_response "simple-golang-database/internal/modules/product/model/response"

	gomock "go.uber.org/mock/gomock"
)

// MockProductUsecase is a mock of ProductUsecase interface.
type MockProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUsecaseMockRecorder
}

// MockProductUsecaseMockRecorder is the mock recorder for MockProductUsecase.
type MockProductUsecaseMockRecorder struct {
	mock *MockProductUsecase
}

// NewMockProductUsecase creates a new mock instance.
func NewMockProductUsecase(ctrl *gomock.Controller) *MockProductUsecase {
	mock := &MockProductUsecase{ctrl: ctrl}
	mock.recorder = &MockProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUsecase) EXPECT() *MockProductUsecaseMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductUsecase) CreateProduct(ctx context.Context, name string, price int64) (product_response.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, name, price)
	ret0, _ := ret[0].(product_response.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductUsecaseMockRecorder) CreateProduct(ctx, name, price any) *MockProductUsecaseCreateProductCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductUsecase)(nil).CreateProduct), ctx, name, price)
	return &MockProductUsecaseCreateProductCall{Call: call}
}

// MockProductUsecaseCreateProductCall wrap *gomock.Call
type MockProductUsecaseCreateProductCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductUsecaseCreateProductCall) Return(arg0 product_response.Product, arg1 error) *MockProductUsecaseCreateProductCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductUsecaseCreateProductCall) Do(f func(context.Context, string, int64) (product_response.Product, error)) *MockProductUsecaseCreateProductCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductUsecaseCreateProductCall) DoAndReturn(f func(context.Context, string, int64) (product_response.Product, error)) *MockProductUsecaseCreateProductCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProductByID mocks base method.
func (m *MockProductUsecase) DeleteProductByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductByID indicates an expected call of DeleteProductByID.
func (mr *MockProductUsecaseMockRecorder) DeleteProductByID(ctx, id any) *MockProductUsecaseDeleteProductByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductByID", reflect.TypeOf((*MockProductUsecase)(nil).DeleteProductByID), ctx, id)
	return &MockProductUsecaseDeleteProductByIDCall{Call: call}
}

// MockProductUsecaseDeleteProductByIDCall wrap *gomock.Call
type MockProductUsecaseDeleteProductByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductUsecaseDeleteProductByIDCall) Return(arg0 error) *MockProductUsecaseDeleteProductByIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductUsecaseDeleteProductByIDCall) Do(f func(context.Context, string) error) *MockProductUsecaseDeleteProductByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductUsecaseDeleteProductByIDCall) DoAndReturn(f func(context.Context, string) error) *MockProductUsecaseDeleteProductByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllProduct mocks base method.
func (m *MockProductUsecase) GetAllProduct(ctx context.Context) ([]product_response.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct", ctx)
	ret0, _ := ret[0].([]product_response.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockProductUsecaseMockRecorder) GetAllProduct(ctx any) *MockProductUsecaseGetAllProductCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockProductUsecase)(nil).GetAllProduct), ctx)
	return &MockProductUsecaseGetAllProductCall{Call: call}
}

// MockProductUsecaseGetAllProductCall wrap *gomock.Call
type MockProductUsecaseGetAllProductCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductUsecaseGetAllProductCall) Return(arg0 []product_response.Product, arg1 error) *MockProductUsecaseGetAllProductCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductUsecaseGetAllProductCall) Do(f func(context.Context) ([]product_response.Product, error)) *MockProductUsecaseGetAllProductCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductUsecaseGetAllProductCall) DoAndReturn(f func(context.Context) ([]product_response.Product, error)) *MockProductUsecaseGetAllProductCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProductByID mocks base method.
func (m *MockProductUsecase) GetProductByID(ctx context.Context, id string) (product_response.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(product_response.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductUsecaseMockRecorder) GetProductByID(ctx, id any) *MockProductUsecaseGetProductByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductUsecase)(nil).GetProductByID), ctx, id)
	return &MockProductUsecaseGetProductByIDCall{Call: call}
}

// MockProductUsecaseGetProductByIDCall wrap *gomock.Call
type MockProductUsecaseGetProductByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductUsecaseGetProductByIDCall) Return(arg0 product_response.Product, arg1 error) *MockProductUsecaseGetProductByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductUsecaseGetProductByIDCall) Do(f func(context.Context, string) (product_response.Product, error)) *MockProductUsecaseGetProductByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductUsecaseGetProductByIDCall) DoAndReturn(f func(context.Context, string) (product_response.Product, error)) *MockProductUsecaseGetProductByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateProductByID mocks base method.
func (m *MockProductUsecase) UpdateProductByID(ctx context.Context, id, name string, price int64) (product_response.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductByID", ctx, id, name, price)
	ret0, _ := ret[0].(product_response.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductByID indicates an expected call of UpdateProductByID.
func (mr *MockProductUsecaseMockRecorder) UpdateProductByID(ctx, id, name, price any) *MockProductUsecaseUpdateProductByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductByID", reflect.TypeOf((*MockProductUsecase)(nil).UpdateProductByID), ctx, id, name, price)
	return &MockProductUsecaseUpdateProductByIDCall{Call: call}
}

// MockProductUsecaseUpdateProductByIDCall wrap *gomock.Call
type MockProductUsecaseUpdateProductByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductUsecaseUpdateProductByIDCall) Return(arg0 product_response.Product, arg1 error) *MockProductUsecaseUpdateProductByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductUsecaseUpdateProductByIDCall) Do(f func(context.Context, string, string, int64) (product_response.Product, error)) *MockProductUsecaseUpdateProductByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductUsecaseUpdateProductByIDCall) DoAndReturn(f func(context.Context, string, string, int64) (product_response.Product, error)) *MockProductUsecaseUpdateProductByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
