// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/product/repository/type.go
//
// Generated by this command:
//
//	mockgen -typed=true -package=mock_repository -source=internal/modules/product/repository/type.go -destination=mock/repository/product.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	product_entity "simple-golang-database/internal/modules/product/model/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductRepository) CreateProduct(ctx context.Context, name string, price int64) (product_entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, name, price)
	ret0, _ := ret[0].(product_entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepositoryMockRecorder) CreateProduct(ctx, name, price any) *MockProductRepositoryCreateProductCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepository)(nil).CreateProduct), ctx, name, price)
	return &MockProductRepositoryCreateProductCall{Call: call}
}

// MockProductRepositoryCreateProductCall wrap *gomock.Call
type MockProductRepositoryCreateProductCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductRepositoryCreateProductCall) Return(product product_entity.Product, err error) *MockProductRepositoryCreateProductCall {
	c.Call = c.Call.Return(product, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductRepositoryCreateProductCall) Do(f func(context.Context, string, int64) (product_entity.Product, error)) *MockProductRepositoryCreateProductCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductRepositoryCreateProductCall) DoAndReturn(f func(context.Context, string, int64) (product_entity.Product, error)) *MockProductRepositoryCreateProductCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProductByID mocks base method.
func (m *MockProductRepository) DeleteProductByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductByID indicates an expected call of DeleteProductByID.
func (mr *MockProductRepositoryMockRecorder) DeleteProductByID(ctx, id any) *MockProductRepositoryDeleteProductByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductByID", reflect.TypeOf((*MockProductRepository)(nil).DeleteProductByID), ctx, id)
	return &MockProductRepositoryDeleteProductByIDCall{Call: call}
}

// MockProductRepositoryDeleteProductByIDCall wrap *gomock.Call
type MockProductRepositoryDeleteProductByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductRepositoryDeleteProductByIDCall) Return(arg0 error) *MockProductRepositoryDeleteProductByIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductRepositoryDeleteProductByIDCall) Do(f func(context.Context, string) error) *MockProductRepositoryDeleteProductByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductRepositoryDeleteProductByIDCall) DoAndReturn(f func(context.Context, string) error) *MockProductRepositoryDeleteProductByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllProduct mocks base method.
func (m *MockProductRepository) GetAllProduct(ctx context.Context) ([]product_entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct", ctx)
	ret0, _ := ret[0].([]product_entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockProductRepositoryMockRecorder) GetAllProduct(ctx any) *MockProductRepositoryGetAllProductCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockProductRepository)(nil).GetAllProduct), ctx)
	return &MockProductRepositoryGetAllProductCall{Call: call}
}

// MockProductRepositoryGetAllProductCall wrap *gomock.Call
type MockProductRepositoryGetAllProductCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductRepositoryGetAllProductCall) Return(arg0 []product_entity.Product, arg1 error) *MockProductRepositoryGetAllProductCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductRepositoryGetAllProductCall) Do(f func(context.Context) ([]product_entity.Product, error)) *MockProductRepositoryGetAllProductCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductRepositoryGetAllProductCall) DoAndReturn(f func(context.Context) ([]product_entity.Product, error)) *MockProductRepositoryGetAllProductCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProductByID mocks base method.
func (m *MockProductRepository) GetProductByID(ctx context.Context, id string) (product_entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(product_entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductRepositoryMockRecorder) GetProductByID(ctx, id any) *MockProductRepositoryGetProductByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductRepository)(nil).GetProductByID), ctx, id)
	return &MockProductRepositoryGetProductByIDCall{Call: call}
}

// MockProductRepositoryGetProductByIDCall wrap *gomock.Call
type MockProductRepositoryGetProductByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductRepositoryGetProductByIDCall) Return(arg0 product_entity.Product, arg1 error) *MockProductRepositoryGetProductByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductRepositoryGetProductByIDCall) Do(f func(context.Context, string) (product_entity.Product, error)) *MockProductRepositoryGetProductByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductRepositoryGetProductByIDCall) DoAndReturn(f func(context.Context, string) (product_entity.Product, error)) *MockProductRepositoryGetProductByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateProductByID mocks base method.
func (m *MockProductRepository) UpdateProductByID(ctx context.Context, id, name string, price int64) (product_entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductByID", ctx, id, name, price)
	ret0, _ := ret[0].(product_entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductByID indicates an expected call of UpdateProductByID.
func (mr *MockProductRepositoryMockRecorder) UpdateProductByID(ctx, id, name, price any) *MockProductRepositoryUpdateProductByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductByID", reflect.TypeOf((*MockProductRepository)(nil).UpdateProductByID), ctx, id, name, price)
	return &MockProductRepositoryUpdateProductByIDCall{Call: call}
}

// MockProductRepositoryUpdateProductByIDCall wrap *gomock.Call
type MockProductRepositoryUpdateProductByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductRepositoryUpdateProductByIDCall) Return(arg0 product_entity.Product, arg1 error) *MockProductRepositoryUpdateProductByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductRepositoryUpdateProductByIDCall) Do(f func(context.Context, string, string, int64) (product_entity.Product, error)) *MockProductRepositoryUpdateProductByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductRepositoryUpdateProductByIDCall) DoAndReturn(f func(context.Context, string, string, int64) (product_entity.Product, error)) *MockProductRepositoryUpdateProductByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
